'use strict';

var React = require('react');
var octiconsReact = require('@primer/octicons-react');
var behaviors = require('@primer/behaviors');
var ActionListContainerContext = require('../../ActionList/ActionListContainerContext.js');
var useSlots = require('../../hooks/useSlots.js');
var useFocusZone = require('../../hooks/useFocusZone.js');
var useProvidedRefOrCreate = require('../../hooks/useProvidedRefOrCreate.js');
var AnchoredOverlay = require('../../AnchoredOverlay/AnchoredOverlay.js');
var Box = require('../../Box/Box.js');
var Heading = require('../../Heading/Heading.js');
var Tooltip = require('../../Tooltip.js');
var TextInput = require('../../TextInput/TextInput.js');
var Spinner = require('../../Spinner/Spinner.js');
var Text = require('../../Text/Text.js');
var index = require('../../Button/index.js');
var IconButton = require('../../Button/IconButton.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const SelectPanelContext = /*#__PURE__*/React__default.default.createContext({
  title: '',
  onCancel: () => {},
  onClearSelection: undefined,
  searchQuery: '',
  setSearchQuery: () => {},
  selectionVariant: 'multiple'
});

// @ts-ignore todo
const SelectPanel = props => {
  const anchorRef = useProvidedRefOrCreate.useProvidedRefOrCreate(props.anchorRef);

  // ðŸš¨ Hack for good API!
  // we strip out Anchor from children and pass it to AnchoredOverlay to render
  // with additional props for accessibility
  let renderAnchor = null;
  const contents = React__default.default.Children.map(props.children, child => {
    if (child.type === SelectPanelButton) {
      renderAnchor = anchorProps => /*#__PURE__*/React__default.default.cloneElement(child, anchorProps);
      return null;
    }
    return child;
  });
  const [internalOpen, setInternalOpen] = React__default.default.useState(props.defaultOpen);
  // sync open state
  React__default.default.useEffect(() => setInternalOpen(props.open), [props.open]);
  const onInternalClose = () => {
    if (props.open === undefined) setInternalOpen(false);
    if (typeof props.onCancel === 'function') props.onCancel();
  };
  const onInternalSubmit = event => {
    event === null || event === void 0 ? void 0 : event.preventDefault(); // there is no event with selectionVariant=instant
    if (props.open === undefined) setInternalOpen(false);
    if (typeof props.onSubmit === 'function') props.onSubmit(event);
  };
  const onInternalClearSelection = () => {
    if (typeof props.onSubmit === 'function') props.onClearSelection();
  };
  const internalAfterSelect = () => {
    if (props.selectionVariant === 'instant') onInternalSubmit();
  };

  /* Search/Filter */
  const [searchQuery, setSearchQuery] = React__default.default.useState('');
  const [slots, childrenInBody] = useSlots.useSlots(contents, {
    header: SelectPanelHeader,
    footer: SelectPanelFooter
  });

  /* Arrow keys navigation for list items */
  const {
    containerRef: listContainerRef
  } = useFocusZone.useFocusZone({
    bindKeys: behaviors.FocusKeys.ArrowVertical | behaviors.FocusKeys.HomeAndEnd | behaviors.FocusKeys.PageUpDown,
    focusableElementFilter: element => element.tagName === 'LI'
  }, [internalOpen]);
  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(AnchoredOverlay.AnchoredOverlay
  // @ts-ignore todo
  , {
    anchorRef: anchorRef,
    renderAnchor: renderAnchor,
    open: internalOpen,
    onOpen: () => setInternalOpen(true),
    onClose: onInternalClose,
    width: props.width || 'medium',
    height: props.height || 'large',
    focusZoneSettings: {
      // we only want focus trap from the overlay,
      // we don't want focus zone on the whole overlay because
      // we have a focus zone on the list
      disabled: true
    }
  }, /*#__PURE__*/React__default.default.createElement(SelectPanelContext.Provider, {
    value: {
      title: props.title,
      onCancel: onInternalClose,
      onClearSelection: props.onClearSelection ? onInternalClearSelection : undefined,
      searchQuery,
      // @ts-ignore todo
      setSearchQuery,
      selectionVariant: props.selectionVariant
    }
  }, /*#__PURE__*/React__default.default.createElement(Box, {
    as: "form",
    onSubmit: onInternalSubmit,
    sx: {
      display: 'flex',
      flexDirection: 'column',
      height: '100%'
    }
  }, slots.header || /*#__PURE__*/React__default.default.createElement(SelectPanel.Header, null), /*#__PURE__*/React__default.default.createElement(Box, {
    as: "div",
    ref: listContainerRef,
    sx: {
      flexShrink: 1,
      flexGrow: 1,
      overflow: 'hidden',
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'space-between',
      ul: {
        overflowY: 'auto',
        flexGrow: 1
      }
    }
  }, /*#__PURE__*/React__default.default.createElement(ActionListContainerContext.ActionListContainerContext.Provider, {
    value: {
      container: 'SelectPanel',
      listRole: 'listbox',
      selectionAttribute: 'aria-selected',
      selectionVariant: props.selectionVariant === 'instant' ? 'single' : props.selectionVariant || 'multiple',
      afterSelect: internalAfterSelect
    }
  }, childrenInBody)), slots.footer))));
};
const SelectPanelButton = /*#__PURE__*/React__default.default.forwardRef((props, anchorRef) => {
  // @ts-ignore todo
  return /*#__PURE__*/React__default.default.createElement(index.Button, _extends({
    ref: anchorRef
  }, props));
});
SelectPanel.Button = SelectPanelButton;
const SelectPanelHeader = ({
  children,
  ...props
}) => {
  const [slots, childrenWithoutSlots] = useSlots.useSlots(children, {
    searchInput: SelectPanelSearchInput
  });
  const {
    title,
    onCancel,
    onClearSelection
  } = React__default.default.useContext(SelectPanelContext);
  return /*#__PURE__*/React__default.default.createElement(Box, _extends({
    sx: {
      display: 'flex',
      flexDirection: 'column',
      gap: 2,
      padding: 2,
      borderBottom: '1px solid',
      borderColor: 'border.default'
    }
  }, props), /*#__PURE__*/React__default.default.createElement(Box, {
    sx: {
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center'
    }
  }, /*#__PURE__*/React__default.default.createElement(Heading, _extends({
    as: "h1",
    sx: {
      fontSize: 14,
      fontWeight: 600,
      marginLeft: 2
    }
  }, props), title), /*#__PURE__*/React__default.default.createElement(Box, null, onClearSelection ? /*#__PURE__*/React__default.default.createElement(Tooltip, {
    text: "Clear selection",
    direction: "s",
    onClick: onClearSelection
  }, /*#__PURE__*/React__default.default.createElement(IconButton.IconButton, {
    type: "button",
    variant: "invisible",
    icon: octiconsReact.FilterRemoveIcon,
    "aria-label": "Clear selection"
  })) : null, /*#__PURE__*/React__default.default.createElement(Tooltip, {
    text: "Close",
    direction: "s"
  }, /*#__PURE__*/React__default.default.createElement(IconButton.IconButton, {
    type: "button",
    variant: "invisible",
    icon: octiconsReact.XIcon,
    "aria-label": "Close",
    onClick: () => onCancel()
  })))), slots.searchInput, childrenWithoutSlots);
};
SelectPanelHeader.displayName = "SelectPanelHeader";
SelectPanel.Header = SelectPanelHeader;

// @ts-ignore todo
const SelectPanelSearchInput = props => {
  const inputRef = /*#__PURE__*/React__default.default.createRef();
  const {
    setSearchQuery
  } = React__default.default.useContext(SelectPanelContext);

  // @ts-ignore todo
  const internalOnChange = event => {
    // If props.onChange is given, the application controls search,
    // otherwise the component does
    if (typeof props.onChange === 'function') props(props.onChange);
    // @ts-ignore todo
    else setSearchQuery(event.target.value);
  };
  return /*#__PURE__*/React__default.default.createElement(TextInput
  // this autofocus doesn't seem to apply ðŸ¤”
  // probably because the focus zone overrides autoFocus
  , _extends({
    autoFocus: true,
    ref: inputRef,
    block: true,
    leadingVisual: octiconsReact.SearchIcon,
    placeholder: "Search",
    trailingAction: /*#__PURE__*/React__default.default.createElement(TextInput.Action, {
      icon: octiconsReact.XCircleFillIcon,
      "aria-label": "Clear",
      sx: {
        color: 'fg.subtle',
        bg: 'none'
      },
      onClick: () => {
        if (inputRef.current) inputRef.current.value = '';
        if (typeof props.onChange === 'function') {
          props.onChange({
            target: inputRef.current,
            currentTarget: inputRef.current
          });
        }
      }
    }),
    sx: {
      /* TODO: uncommenting this breaks keyboard navigation, that's odd */
      // '& input:empty + .TextInput-action': {display: 'none'},
    },
    onChange: internalOnChange
  }, props));
};
SelectPanelSearchInput.displayName = "SelectPanelSearchInput";
SelectPanel.SearchInput = SelectPanelSearchInput;
const SelectPanelFooter = ({
  ...props
}) => {
  const {
    onCancel,
    selectionVariant
  } = React__default.default.useContext(SelectPanelContext);
  const hidePrimaryActions = selectionVariant === 'instant';
  if (hidePrimaryActions && !props.children) {
    // nothing to render
    // todo: we can inform them the developer footer will render nothing
    return null;
  }
  return /*#__PURE__*/React__default.default.createElement(Box, {
    sx: {
      display: 'flex',
      justifyContent: 'space-between',
      padding: 3,
      borderTop: '1px solid',
      borderColor: 'border.default'
    }
  }, /*#__PURE__*/React__default.default.createElement(Box, {
    sx: {
      flexGrow: hidePrimaryActions ? 1 : 0
    }
  }, props.children), hidePrimaryActions ? null : /*#__PURE__*/React__default.default.createElement(Box, {
    sx: {
      display: 'flex',
      gap: 2
    }
  }, /*#__PURE__*/React__default.default.createElement(index.Button, {
    size: "small",
    type: "button",
    onClick: () => onCancel()
  }, "Cancel"), /*#__PURE__*/React__default.default.createElement(index.Button, {
    size: "small",
    type: "submit",
    variant: "primary"
  }, "Save")));
};
SelectPanelFooter.displayName = "SelectPanelFooter";
SelectPanel.Footer = SelectPanelFooter;

// @ts-ignore todo
SelectPanel.SecondaryButton = props => {
  return /*#__PURE__*/React__default.default.createElement(index.Button, _extends({}, props, {
    size: "small",
    type: "button",
    block: true
  }));
};
// SelectPanel.SecondaryLink = props => {
//   return <a {...props}>{props.children}</a>
// }

const SelectPanelLoading = ({
  children = 'Fetching items...'
}) => {
  return /*#__PURE__*/React__default.default.createElement(Box, {
    sx: {
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'center',
      alignItems: 'center',
      height: '100%',
      gap: 3
    }
  }, /*#__PURE__*/React__default.default.createElement(Spinner, {
    size: "medium"
  }), /*#__PURE__*/React__default.default.createElement(Text, {
    sx: {
      fontSize: 1,
      color: 'fg.muted'
    }
  }, children));
};
SelectPanelLoading.displayName = "SelectPanelLoading";
SelectPanel.Loading = SelectPanelLoading;
const SelectPanelEmptyMessage = ({
  children = 'No items found...'
}) => {
  return /*#__PURE__*/React__default.default.createElement(Box, {
    sx: {
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'center',
      alignItems: 'center',
      flexGrow: 1,
      height: '100%',
      gap: 2
    }
  }, /*#__PURE__*/React__default.default.createElement(Text, {
    sx: {
      fontSize: 1
    }
  }, children), /*#__PURE__*/React__default.default.createElement(Text, {
    sx: {
      fontSize: 0,
      color: 'fg.muted'
    }
  }, "Try a different search term"));
};
SelectPanelEmptyMessage.displayName = "SelectPanelEmptyMessage";
SelectPanel.EmptyMessage = SelectPanelEmptyMessage;

// This is probably a horrible idea and we would not ship this...
// const deriveItemsFromActionList = (actionListItems: React.ReactNode[]) => {
//   return React.Children.toArray(actionListItems).map(actionListItemNode => {
//     const itemProps = actionListItemNode.props

//     const [slots, childrenWithoutSlots] = useSlots(itemProps.children, {
//       leadingVisual: ActionList.LeadingVisual,
//       trailingVisual: ActionList.TrailingVisual,
//       description: ActionList.Description,
//     })

//     return {
//       description: slots.description?.props.children,
//       name: childrenWithoutSlots[0],
//       selected: itemProps.selected,
//     }
//   })
// }

exports.SelectPanel = SelectPanel;
